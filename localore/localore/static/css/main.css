@charset "UTF-8";
html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

/*!
Typeplate : Starter Kit
URL ........... http://typeplate.com
Version ....... 3.0.1
Github ........ https://github.com/typeplate/starter-kit
Authors ....... Dennis Gaebel (@gryghostvisuals) & Zachary Kain (@zakkain)
License ....... Creative Commmons Attribution 3.0
License URL ... https://github.com/typeplate/starter-kit/blob/master/license.txt
*/
@font-face {
  font-family: "Ampersand";
  src: local("Georgia"), local("Garamond"), local("Palatino"), local("Book Antiqua");
  unicode-range: U+0026; }

@font-face {
  font-family: "Ampersand";
  src: local("Georgia");
  unicode-range: U+270C; }

.typl8-tera, .typl8-giga, .typl8-mega, h1, .typl8-alpha, h2, .typl8-beta, h3, .typl8-gamma, h4, .typl8-delta, h5, .typl8-epsilon, .typl8-zeta, h6 {
  text-rendering: optimizeLegibility;
  line-height: 1;
  margin-top: 0;
  color: #222; }

blockquote + figcaption cite {
  display: block;
  font-size: inherit;
  text-align: right; }

body {
  word-wrap: break-word; }

pre code {
  word-wrap: normal; }

html {
  font: normal 100% / 1.65 serif; }

body {
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  color: #444; }

.typl8-tera {
  font-size: 7.3125em;
  margin-bottom: 4.4318181818rem; }

.typl8-giga {
  font-size: 5.625em;
  margin-bottom: 3.4090909091rem; }

.typl8-mega, h1 {
  font-size: 4.5em;
  margin-bottom: 2.7272727273rem; }

.typl8-alpha, h2 {
  font-size: 3.75em;
  margin-bottom: 2.2727272727rem; }

.typl8-beta, h3 {
  font-size: 3em;
  margin-bottom: 1.8181818182rem; }

.typl8-gamma, h4 {
  font-size: 2.25em;
  margin-bottom: 1.3636363636rem; }

.typl8-delta, h5 {
  font-size: 1.5em;
  margin-bottom: 0.9090909091rem; }

.typl8-epsilon {
  font-size: 1.3125em;
  margin-bottom: 0.7954545455rem; }

.typl8-zeta, h6 {
  font-size: 1.125em;
  margin-bottom: 0.6818181818rem; }

p {
  margin: auto auto 1.5rem; }

small {
  font-size: 65%; }

input,
abbr,
acronym,
blockquote,
code,
kbd,
q,
samp,
var {
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none; }

pre {
  white-space: pre; }
  pre code {
    white-space: -moz-pre-wrap;
    white-space: pre-wrap; }

code {
  white-space: pre;
  font-family: monospace; }

abbr {
  -webkit-font-variant: small-caps;
  -moz-font-variant: small-caps;
  -ms-font-variant: small-caps;
  font-variant: small-caps;
  font-weight: 600;
  text-transform: lowercase;
  color: gray; }
  abbr[title]:hover {
    cursor: help; }

.typl8-drop-cap:first-letter {
  float: left;
  margin: 10px 10px 0 0;
  padding: 0 20px;
  font-size: 4em;
  font-family: inherit;
  line-height: 1;
  text-indent: 0;
  background: transparent;
  color: inherit; }

p + .typl8-drop-cap {
  text-indent: 0;
  margin-top: 0; }

/**
 * Lining Definition Style Markup
 *
  <dl class="typl8-lining">
    <dt><b></b></dt>
    <dd></dd>
  </dl>
 *
 * Extend this object into your markup.
 *
 */
.typl8-lining dt,
.typl8-lining dd {
  display: inline;
  margin: 0; }

.typl8-lining dt + dt:before,
.typl8-lining dd + dt:before {
  content: "\A";
  white-space: pre; }

.typl8-lining dd + dd:before {
  content: ", "; }

.typl8-lining dd:before {
  content: ": ";
  margin-left: -0.2rem; }

/**
 * Dictionary Definition Style Markup
 *
  <dl class="typl8-dictionary-style">
    <dt><b></b></dt>
    <dd></dd>
  </dl>
 *
 * Extend this object into your markup.
 *
 */
.typl8-dictionary-style dt {
  display: inline;
  counter-reset: definitions; }
  .typl8-dictionary-style dt + dt:before {
    content: ", ";
    margin-left: -0.2rem; }

.typl8-dictionary-style dd {
  display: block;
  counter-increment: definitions; }
  .typl8-dictionary-style dd:before {
    content: counter(definitions, decimal) ". "; }

/**
 * Blockquote Markup
 *
    <figure>
      <blockquote cite="">
        <p></p>
      </blockquote>
      <figcaption>
        <cite>
          <small><a href=""></a></small>
        </cite>
      </figcaption>
    </figure>
 *
 * Extend this object into your markup.
 *
 */
/**
 * Pull Quotes Markup
 *
  <aside class="typl8-pull-quote">
    <blockquote>
      <p></p>
    </blockquote>
  </aside>
 *
 * Extend this object into your custom stylesheet.
 *
 */
.typl8-pull-quote {
  position: relative;
  padding: 1em; }
  .typl8-pull-quote:before, .typl8-pull-quote:after {
    height: 1em;
    opacity: 0.5;
    position: absolute;
    font-size: 4em;
    color: #dc976e; }
  .typl8-pull-quote:before {
    content: '“';
    top: 0;
    left: 0; }
  .typl8-pull-quote:after {
    content: '”';
    bottom: 0;
    right: 0; }

/**
 * Figures Markup
 *
  <figure>
    <figcaption>
      <strong>Fig. X.X | </strong><cite title=""></cite>
    </figcaption>
  </figure>
 *
 * Extend this object into your markup.
 *
 */
/**
 * Footnote Markup : Replace 'X' with your unique number for each footnote
 *
  <article>
    <p><sup><a href="#fn-itemX" id="fn-returnX"></a></sup></p>
    <footer>
      <ol class="foot-notes">
        <li id="fn-itemX"><a href="#fn-returnX">↩</a></li>
      </ol>
    </footer>
  </article>
 *
 * Extend this object into your markup.
 *
 */
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
.fade {
  opacity: 0;
  -webkit-transition: opacity 0.15s linear;
  -moz-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear; }
  .fade.in {
    opacity: 1; }

.collapse {
  display: none; }
  .collapse.in {
    display: block; }

tr.collapse.in {
  display: table-row; }

tbody.collapse.in {
  display: table-row-group; }

.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  -webkit-transition-property: height, visibility;
  -moz-transition-property: height, visibility;
  transition-property: height, visibility;
  -webkit-transition-duration: 0.35s;
  -moz-transition-duration: 0.35s;
  transition-duration: 0.35s;
  -webkit-transition-timing-function: ease;
  -moz-transition-timing-function: ease;
  transition-timing-function: ease; }

/* Mixin */
.clearfix::after {
  clear: both;
  content: "";
  display: table; }

.pull-right {
  float: right !important; }

.pull-left {
  float: left !important; }

.hide {
  display: none !important; }

.show {
  display: block !important; }

.invisible {
  visibility: hidden; }

.hidden {
  display: none !important; }

ul,
ol {
  margin-top: 0;
  margin-bottom: 10px; }
  ul ul,
  ul ol,
  ol ul,
  ol ol {
    margin-bottom: 0; }

.list-unstyled {
  padding-left: 0;
  list-style: none; }

.list-inline {
  padding-left: 0;
  list-style: none;
  margin-left: -5px; }
  .list-inline > li {
    display: inline-block;
    margin-right: -4px;
    padding-left: 5px;
    padding-right: 5px; }

*, :after, :before {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

html, body {
  width: 100%;
  overflow-x: hidden; }

body {
  background: #fff;
  font-family: "Roboto Slab", serif;
  color: #57585a; }

.container {
  max-width: 48em;
  margin-left: auto;
  margin-right: auto;
  padding-top: 200px;
  padding-bottom: 3em; }
  .container::after {
    clear: both;
    content: "";
    display: table; }
  @media screen and (max-width: 48em) {
    .container {
      padding: 200px 2.3576515979% 3em 2.3576515979%; } }
  .container > img {
    display: block;
    max-width: 100%;
    height: auto;
    margin: 3rem auto; }

a {
  font-family: "Roboto Slab", serif;
  color: #231f20;
  text-decoration: none; }
  a:hover {
    text-decoration: underline; }

.rich-text img {
  max-width: 100%;
  height: auto; }

.responsive-object {
  padding-bottom: 0px !important; }

.j-filters {
  display: none !important; }

.juicer-feed.image-grid .j-poster {
  visibility: visible !important;
  opacity: 1 !important; }

.browsehappy {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0; }

header {
  background-color: rgba(0, 0, 0, 0.6);
  padding: 1.5em 1em;
  width: 100%;
  height: 85px;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 10;
  -webkit-transition: all 300ms ease-in-out;
  -moz-transition: all 300ms ease-in-out;
  transition: all 300ms ease-in-out; }
  header .nav-section {
    height: 100%;
    margin: 0 auto;
    position: relative;
    max-width: 64em;
    margin-left: auto;
    margin-right: auto; }
    header .nav-section::after {
      clear: both;
      content: "";
      display: table; }
    header .nav-section .logo {
      position: relative;
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
      -webkit-transition: all 250ms ease-in-out;
      -moz-transition: all 250ms ease-in-out;
      transition: all 250ms ease-in-out; }
      header .nav-section .logo svg, header .nav-section .logo img {
        max-height: 100%;
        max-width: 100%; }
    header .nav-section .fa-logo {
      float: left;
      height: 100%;
      width: inherit; }
    header .nav-section .air-logo {
      float: right;
      height: 125%; }

footer {
  padding: 2em;
  text-align: center;
  background-color: #f16736; }
  footer p, footer a {
    color: #fff;
    font-family: "Roboto", serif;
    font-size: 14px; }
  footer a {
    text-decoration: underline; }

.team-section {
  margin-top: 3rem; }
  .team-section .team-item {
    text-align: center;
    margin-bottom: 3rem; }
    .team-section .team-item .team-location {
      font-family: "Roboto", serif;
      font-weight: 100;
      text-transform: uppercase;
      letter-spacing: 2px; }
    .team-section .team-item .team-name {
      display: inline-block;
      font-family: "Roboto Slab", serif;
      font-weight: 400;
      margin-bottom: 2.5rem; }
      .team-section .team-item .team-name:hover {
        text-decoration: underline; }
    .team-section .team-item .team-collapse-toggle {
      font-size: 36px;
      line-height: 1; }
    .team-section .team-item .team-members {
      display: table;
      width: 100%;
      table-layout: fixed; }
    .team-section .team-item .team-member {
      display: table-cell;
      width: 33.3333333333%;
      padding: 0 2.3576515979% 0 2.3576515979%;
      text-align: left; }
      .team-section .team-item .team-member:first-of-type {
        padding: 0 4.7153031959% 0 0; }
      .team-section .team-item .team-member:last-of-type {
        padding: 0 0 0 4.7153031959%; }
      .team-section .team-item .team-member > img {
        width: 75%;
        margin: 0 auto 15px auto;
        border-radius: 100%;
        display: block;
        max-width: 100%;
        height: auto; }
      .team-section .team-item .team-member .team-member-name {
        font-family: "Roboto Slab", serif;
        color: #57585a; }
      .team-section .team-item .team-member .team-member-title {
        font-family: "Roboto Slab", serif;
        margin-bottom: 10px; }
      .team-section .team-item .team-member ul.team-member-links {
        border: 1px solid blue; }
      .team-section .team-item .team-member .team-member-desc {
        font-family: "Roboto", serif;
        font-size: 0.9375em;
        line-height: 1.4; }

.title-section {
  width: 400px;
  height: 127.5px;
  background-color: #231f20;
  position: fixed;
  top: 0;
  left: 50%;
  margin-left: -200px;
  z-index: 20;
  text-align: center; }
  .title-section:after {
    content: '';
    display: block;
    position: absolute;
    bottom: -42.5px;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 42.5px 200px 0 200px;
    border-color: #231f20 transparent transparent transparent; }
  .title-section > div {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    top: 60%; }
  .title-section h1, .title-section h3 {
    color: #fff;
    font-weight: 300; }
  .title-section h1 {
    font-size: 2.25em;
    margin-bottom: 7px; }
  .title-section h3 {
    font-size: 1em;
    margin-bottom: 15px; }
  .title-section .title-section-about li:not(:last-child) {
    border-right: 2px solid #3e3739; }
  .title-section .title-section-about li {
    padding-left: 7px;
    padding-right: 7px; }
  .title-section .title-section-about a {
    font-size: 0.8125em;
    letter-spacing: 2px;
    font-family: "Roboto", serif;
    color: #f16736;
    text-transform: uppercase; }
    .title-section .title-section-about a.selected {
      color: #979797; }
      .title-section .title-section-about a.selected:hover {
        text-decoration: none; }

/*# sourceMappingURL=data:application/json;base64, */